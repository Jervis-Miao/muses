<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!--此文件负责整个mvc中的配置-->

    <!-- 权限认证拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="cn.muses.authc.AuthorityAnnotationInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 自动扫描且只扫描@Controller -->
    <context:component-scan base-package="com.muses" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- Druid Spring监控. 类型匹配方式 -->
    <bean id="druid-type-proxyCreator" class="com.alibaba.druid.support.spring.stat.BeanTypeAutoProxyCreator">
        <!-- 所有BaseController的派生类被拦截监控  -->
        <property name="targetBeanType" value="cn.muses.common.mvc.web.api.BaseController"/>
        <property name="interceptorNames">
            <list>
                <value>druid-stat-interceptor</value>
            </list>
        </property>
    </bean>

    <!-- 自定义Validator -->
    <bean id="validator" class="cn.muses.common.validator.spring.EasyValidator"/>

    <!-- 数据类型转换. Spring3 之前使用PropertyEditor, 3之后提供了Converter接口 -->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="cn.muses.common.mvc.converter.StringTrimmerConverter"></bean>
                <bean class="cn.muses.common.mvc.converter.StringDateConverter">
                    <property name="datePattern" value="yyyy-MM-dd HH:mm:ss"/>
                </bean>
            </set>
        </property>
    </bean>

    <mvc:annotation-driven
            content-negotiation-manager="contentNegotiationManager"
            conversion-service="conversionService">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <bean class="org.springframework.http.converter.FormHttpMessageConverter"/>
        </mvc:message-converters>
        <mvc:argument-resolvers>
            <bean class="cn.muses.common.mvc.window.support.WindowAsyncArgumentResolver"/>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>

    <mvc:interceptors>
        <!--<bean class="DevCocInterceptor"/>-->
        <bean class="cn.muses.common.validator.spring.EasyValidatorInterceptor"/>
        <!--<bean class="RequestExecutionTimeConsumptionInterceptor"/>-->
    </mvc:interceptors>

    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
    <bean id="contentNegotiationManager"
          class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <value>
                json=application/json
                xml=application/xml
            </value>
        </property>
    </bean>

    <!--静态资源映射-->
    <!--本项目把静态资源放在了webapp的statics目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="/WEB-INF/statics/css/"/>
    <mvc:resources mapping="/js/**" location="/WEB-INF/statics/js/"/>
    <mvc:resources mapping="/images/**" location="/WEB-INF/statics/images/"/>
    <mvc:resources mapping="/download/**" location="/WEB-INF/statics/download/" order="500"/>
    <!-- ico添加 -->
    <mvc:resources mapping="/favicon.ico" location="/WEB-INF/"/>

    <!-- 文件上传 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="31457280"/>
        <property name="defaultEncoding" value="utf-8"/>
    </bean>

    <!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL <mvc:default-servlet-handler/> -->
    <bean id="handlerMapping" class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping">
        <property name="order" value="1"/>
    </bean>
    <bean id="beanNameUrlHandlerMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
        <property name="order" value="2"/>
    </bean>
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

    <!-- 支持 Shiro对Controller的方法级AOP安全控制 begin -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!-- end -->

    <!--启用spring mvc 注解 -->
    <context:annotation-config/>

    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 定义无Controller的path<->view直接映射 -->
    <mvc:view-controller path="/" view-name="index"/>

</beans>
